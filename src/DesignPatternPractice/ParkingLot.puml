@startuml

'A -- B       // Association
'B o-- C      // Aggregation
'C *-- A      // Composition
'B <|-- C     // Generalization/Inheritance
'C ..|> A     // Realization
'A ..> B      // Dependency

class Vehicle {
    - vehicleNumber: String
    - type: VehicleType
    + Vehicle(vehicleNumber: String, type: VehicleType)
    + getVehicleNumber(): String
    + getType(): VehicleType
}

enum VehicleType {
    CAR
    MOTORBIKE
}

class ParkingSpot {
    - spotNumber: int
    - available: boolean
    - vehicle: Vehicle
    + ParkingSpot(spotNumber: int)
    + getSpotNumber(): int
    + isAvailable(): boolean
    + getVehicle(): Vehicle
    + parkVehicle(vehicle: Vehicle): void
    + removeVehicle(): void
}

class ParkingLot {
    - spots: List<ParkingSpot>
    + ParkingLot(capacity: int)
    + getSpots(): List<ParkingSpot>
}

class ParkingController {
    - parkingLot: ParkingLot
    -paymentProcess: PaymentProcess
    + ParkingController(parkingLot: ParkingLot)
    + parkVehicle(vehicle: Vehicle): ParkingSpot
    + removeVehicle(vehicle: Vehicle): double
    + findAvailableSpot(type: VehicleType): ParkingSpot

}
interface PaymentProcess {
     calculateParkingFee(): double
}

class TwoWheelerPayment {
    calculateParkingFeeFee(): double
}
class FourWheelerPayment{
   calculateParkingFeeFee(): double
}

Vehicle "1" *-- "0..1" VehicleType : has

ParkingLot "1" *-- "*" ParkingSpot : contains
ParkingController  ..>  ParkingLot : has
ParkingController "1" -- "*" Vehicle : interacts with
PaymentProcess ..|> TwoWheelerPayment
PaymentProcess ..|> FourWheelerPayment
ParkingController  ..>  PaymentProcess : has

@enduml
